name: lio
version: 0.9.2.2
id: lio-0.9.2.2-56f4442e344645f74ead43a17b9b1c1d
license: GPL
copyright:
maintainer: Hails team <hails at scs dot stanford dot edu>
stability:
homepage:
package-url:
synopsis: Labeled IO Information Flow Control Library
description: The /Labeled IO/ (LIO) library is an information flow control (IFC)
             library. IFC is a mechanism that enforces security policies by
             tracking and controlling the flow of information within a system.
             Different from discretionary access control (think UNIX file
             permissions), with IFC you can execute an untrusted computation on
             your secret data and be sure that it does not leak it or overwrite
             it.
             .
             LIO is an IFC library that can be used to implement such untrusted
             computations. LIO provides combinators similar to those of 'IO' for
             performing side-effecting computations (e.g., accessing the
             filesystem, modifying mutable references, throwing exceptions, etc.)
             To track and control the flow of information, LIO associates a
             security policy, usually called a /label/, with every piece of data.
             A label may, for example, impose a restriction on who can observe,
             propagate, or modify the data labeled as such.  Different from
             standard IO operations, the LIO counterparts usually take an
             additional parameter for the label which they inspect before
             actually performing the (underlying IO) side-effecting computation.
             So, before writing to a file LIO asserts that the write will not
             violate any security policies associated with the file or the data
             to be written.
             .
             Most code should import module "LIO" and whichever label format the
             application is using (e.g., "LIO.DCLabel"). All untrusted code
             should have type 'LIO', which trusted code can safely execute with
             'evalLIO'. See "LIO" for a description of the core library API.
             .
             The paper that describes the core of LIO, including motivation and
             formal modeling/proofs, is available here:
             <http://arxiv.org/abs/1207.1457>
category: Security
author: Hails team
exposed: True
exposed-modules: LIO LIO.Label LIO.Core LIO.TCB LIO.Labeled
                 LIO.Labeled.TCB LIO.LIORef LIO.LIORef.TCB LIO.Gate LIO.Privs
                 LIO.Privs.TCB LIO.Concurrent LIO.Concurrent.TCB
                 LIO.Concurrent.LMVar LIO.Concurrent.LMVar.TCB LIO.DCLabel
                 LIO.DCLabel.Core LIO.DCLabel.Privs LIO.DCLabel.Privs.TCB
                 LIO.DCLabel.Serialize LIO.DCLabel.DSL LIO.Handle LIO.FS.TCB
hidden-modules:
trusted: False
import-dirs: /home/lbh/commenter/cabal-dev//lib/lio-0.9.2.2/ghc-7.4.1
library-dirs: /home/lbh/commenter/cabal-dev//lib/lio-0.9.2.2/ghc-7.4.1
hs-libraries: HSlio-0.9.2.2
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: SHA-1.6.1-ec209ed8fc3efb1e768d2d2315bf38dd
         base-4.5.0.0-40b99d05fae6a4eea95ea69e6e0c9702
         binary-0.7.0.1-416b3e22e991bc6330c2a97c44595807
         bytestring-0.10.0.2-d7fd21e898c13d4366509c58b659f472
         containers-0.4.2.1-cfc6420ecc2194c9ed977b06bdfd9e69
         directory-1.2.0.1-9d9179886009eb508804564a9859cace
         filepath-1.3.0.0-973f5e9fbed93e25cbe66dfeb6b99ad9
         transformers-0.3.0.0-b55e1ba0a2f0da13c35eec50d1253059
         xattr-0.6.1-f0a615b887e33605fbbafe4c968fbc7c
         zlib-0.5.4.1-12b6fe7eb426c11292d80981176cfb0b
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: /home/lbh/commenter/cabal-dev//share/doc/lio-0.9.2.2/html/lio.haddock
haddock-html: /home/lbh/commenter/cabal-dev//share/doc/lio-0.9.2.2/html
